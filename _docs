##Syntax
List --> l = [a,b,d,e,c]
calling List --> l[0] gives element a, l[-1] gives element c
slicing list --> l[2:4] gives d,e
concat/adding list --> l + [f,g] => [a,b,d,e,c,f,g]
delete element from list --> del(l[2]) => [a,b,e,c]
get index of element --> l.index("c") => 4
adding element in the end --> l.append('k')

length of string/list --> len(str)

numpy array --> np_arr = np.array(["a","b","c"])
size of numpy array --> np_arr.shape
calling element from numpy array --> np_arr[0,2] gives "c"
np.logical_and(),np.logical_or(),np.logical_not() are used as logical operators on numpy arrays
looping over 2D np.array
for val in np.nditer(np_2d_arr)

plotting
making a plot --> plt.plot(x_axis,y_axis) {two dimensional}     plt.plot(y_axis) {one dimensional--set integer on x-axis}
showing plot on screen --> plt.show()
scatter plot --> plt.scatter(x_vals,y_vals)
histogram --> plt.hist(vals,bin_nos)
plt.xlabel(x_lab)
plt.ylabel(y_lab)
plt.title(title)

Dictionaries
making dictionaries --> dict = {"a":1,"b":2,"c":3}
calling value in dict --> dict["b"] => 2
delete a key-value pair --> del(dict["c"]) => {"a":1,"b":2}
looping over dictionary
for key,value in dict.items()
adding element in dictonary --> langs_count["d"]=4

DataFrame
making dataframe --> df = pd.DataFrame(dict)
setting label --> df.label = label_list
DataFrame from a csv --> pd.csv_read('names.csv' , index_col = 0{specifying index column})
selecting a column --> brics['country']  (this returns a pandas series with labels)
                   --> brics[['country']] (this returns a pandas DataFrame)
selecting a rows   --> brics[1:4] outputs rows 2,3 and 4
                   --> brics.loc['RU'] => row with 'RU' label (type is a pd series)
                   --> brics.loc[['RU']] => row with 'RU' label (type is a pd DataFrame)
selecting specific rows and cols  --> brics.loc[["RU","IN"],["country"]] => country col of rows 'RU' and 'IN'
use brics.loc[:,["country"]] to get full 'country column'
use iloc if you want to access data using positions
selecting rows using some condition --> brics[brice['area']>8]
looping over DataFrame
for label,row in df.iterrows()    =>  label contains label of hte row, row contains data of the row as pandas series
brics["a"] = brics["b"].apply(len)  --> apply len function on "b" column of brics and save that to column "a"

for loop
for height in fam:
  print(fam)          =>  this prints all height in fam list

for index,height in enumerate(fam):   =>    gives index as well as height from fam list

Random number generator --> np.random.rand()
----- "" ---- seed  --> np.random.seed(123)
Random integer generator --> np.random.randint(0,7) => generate random integer from 0 to 6

1 to 100 series --> range(100)

function defination:-
def square(orig_no,pow = 1{default argument}):
  """Returns squre of a value"""      --> docstrings
  new_val = orig_val ** pow
  return new_val
return a tuple if you want to return more than 1 result
pass multiple arguments --> *args
pass multiple arguments with arguments --> **kwargs
  
tuple
t = (2,3,4)
a,b,c = t   -> a => 2, b=>3, c=>4
accessing an element  -->   t[1] => 3
