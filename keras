from keras import Sequential
neural_net = Sequential() --> initialtes the sequential class

from keras import Dense
neural_net.add() --> adds a layer to the network
neural_net.add(Dense(5{no of nodes}, input_dim=8{input nodes(only specified in 1st hidden layer)}, 
            activation='relu'{activation function})) --> adding a dense layer to out neural network

neural_net.compile(loss='binary_crossentropy'{loss function to be cosidered}, 
             optimizer='adam'{optimizer(like gradient descent) used}, 
             metrics=['accuracy']{evalualtion metric})

neural_net.fit(X_train{input of training set}, Y_train{ouput of training set}, epochs=1000{number of iteration}, 
            verbose=0{print log while running th NN}, batch_size={size of each batch}, 
            callbacks={optional-set of funtion to be applied at a stage}, 
            initial_epoch=0{eposch at which to start the training-useful to resume previous training})
            
neural_net.evaluate(X_test,y_test, verbose = 0) --> gives out loss, accuracy

neural_net_fitted.history --> dict that contains loss and accuracy for each epochs our model went through

keras.callbacks.EarlyStopping(monitor='val_loss'{thing to be monitored}, min_delta=0{min change in monitored quantity}, 
            patience=0{no of epochs to wait if there is no imporvement}, verbose=0, 
            mode='auto'{min/max/auto, monitor stop decreasing/monitor stop increasing/automatically inferred from monitor name}, 
            baseline=None{training will stop if there is no improvement over baseline}, 
            restore_best_weights=False{True/False, use model weight with best monitor value/use weights of last step}) --> callback for early stopping using validation set


